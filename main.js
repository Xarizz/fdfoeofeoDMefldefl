const { Telegraf, Markup, Composer, Scenes } = require("telegraf");

const { session } = require("grammy");

const bot = new Telegraf("6072385956:AAEYoNnt_NQsPsthbt4t4JbCpruuC4b8MG8")

function initial() {
    return {
        mon: 0,
        id: 0

    };
}
bot.use(session({ initial }));
bot.command("start", async (ctx) => {
    const subscriptionStatus = await ctx.telegram.getChatMember('@BrawlGemsOff', ctx.from.id)
    if (subscriptionStatus.status === 'member' || subscriptionStatus.status === 'creator' || subscriptionStatus.status === 'admin') {
        await ctx.sendMessage("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ –±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≥–µ–º—ã! ü§†", {
            reply_markup: {
                keyboard: [["–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å ü•∑", "–í—ã–≤–µ—Å—Ç–∏ üîç"], ["–ü—Ä–æ—Ñ–∏–ª—å ü¶πüèº"]],
                resize_keyboard: true
            }
        })
    } else {
        ctx.reply('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –±–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª! üëæ', {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
                            url: 'https://t.me/BrawlGemsOff'
                        },

                    ],
                    [
                        {
                            text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å',
                            callback_data: 'check'
                        }
                    ]
                ]
            }
        })
    }

})
bot.action("check", async (ctx) => {
    const subscriptionStatus = await ctx.telegram.getChatMember('@BrawlGemsOff', ctx.from.id)
    if (subscriptionStatus.status === 'member' || subscriptionStatus.status === 'creator') {
        await ctx.sendMessage("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ –±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≥–µ–º—ã! ü§†", {
            reply_markup: {
                keyboard: [["–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å ü•∑", "–í—ã–≤–µ—Å—Ç–∏ üîç"], ["–ü—Ä–æ—Ñ–∏–ª—å ü¶πüèº"]],
                resize_keyboard: true
            }
        })
    } else {
        ctx.answerCbQuery("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª")
    }
})

bot.on('channel_post', (ctx) => {
    const channelId = ctx.update.channel_post.chat.id;
    console.log(`Channel ID: ${channelId}`);
});

bot.hears("–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å ü•∑", async (ctx) => {
    await ctx.sendMessage("–ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´ –ö–ª–∏–∫–∞—Ç—å ¬ª –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –ø–æ 1 –≥–µ–º—É –∑–∞ –∫–ª–∏–∫! üëª", {
        reply_markup: {
            keyboard: [["‚úçüèª –ö–ª–∏–∫–∞—Ç—å"], ["üîô –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é"]],
            resize_keyboard: true
        }
    })
})

bot.hears("–ü—Ä–æ—Ñ–∏–ª—å ü¶πüèº", async (ctx) => {
    await ctx.sendMessage(`üëπ UID: ${ctx.from.id}\nü¶πüèº –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${ctx.session.mon}\nüöÄ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: ${ctx.session.mon}`)
})

bot.hears("–í—ã–≤–µ—Å—Ç–∏ üîç", async (ctx) => {
    if (ctx.session.mon < 1) {
        await ctx.sendMessage("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ 60 –≥–µ–º–æ–≤ !")
    }
    else {
        await ctx.sendMessage("–û—Ç–ª–∏—á–Ω–æ, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üöÄ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º!", {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: "üöÄ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                            url: "https://telegramorginfo.ru"
                        }
                    ]
                ]
            }
        })
    }
})
bot.hears("‚úçüèª –ö–ª–∏–∫–∞—Ç—å", async (ctx) => {
    await ctx.sendMessage("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 1 –≥–µ–º! ü§ë")
    ctx.session.mon += 1
})
bot.hears("üîô –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", async (ctx) => {
    await ctx.sendMessage("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ –±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≥–µ–º—ã! ü§†", {
        reply_markup: {
            keyboard: [["–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å ü•∑", "–í—ã–≤–µ—Å—Ç–∏ üîç"], ["–ü—Ä–æ—Ñ–∏–ª—å ü¶πüèº"]],
            resize_keyboard: true
        }
    })
})
bot.launch()